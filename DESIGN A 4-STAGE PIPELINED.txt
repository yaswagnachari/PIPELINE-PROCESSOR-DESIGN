Here's a complete design for a 4-stage pipelined processor in Verilog that supports basic instructions like ADD, SUB, and LOAD. This is a simplified educational model to help you understand pipeline stages and instruction flow.

âœ… 1. Processor Overview
ðŸ“Œ Supported Instructions
ADD rd, rs1, rs2 â€” R[rd] = R[rs1] + R[rs2]

SUB rd, rs1, rs2 â€” R[rd] = R[rs1] - R[rs2]

LOAD rd, addr â€” R[rd] = MEM[addr]

ðŸ§± 2. Pipeline Stages
Stage	Name	Description
IF	Instruction Fetch	Fetch instruction from memory
ID	Instruction Decode	Decode instruction, read registers
EX	Execute	Perform ALU operation or address calc
WB	Write Back	Write result back to register file

ðŸ“„ 3. Verilog Modules
ðŸ§  3.1 Instruction Format (simplified 16-bit)
verilog
Copy
Edit
// Instruction format:
// [15:12] opcode
// [11:8]  rd
// [7:4]   rs1
// [3:0]   rs2 or imm (depending on opcode)
ðŸ§© 3.2 Top-Level Processor (pipelined_cpu.v)
verilog
Copy
Edit
module pipelined_cpu (
    input clk,
    input reset
);
    // Define opcodes
    localparam OP_ADD  = 4'b0000;
    localparam OP_SUB  = 4'b0001;
    localparam OP_LOAD = 4'b0010;

    // Pipeline registers
    reg [15:0] IF_ID_instr;
    reg [15:0] ID_EX_instr;
    reg [7:0]  ID_EX_reg1, ID_EX_reg2;
    reg [7:0]  EX_WB_result;
    reg [3:0]  EX_WB_rd;
    reg [3:0]  EX_opcode;

    // Register file
    reg [7:0] regfile [0:15];

    // Instruction memory
    reg [15:0] instr_mem [0:15];

    // Data memory
    reg [7:0] data_mem [0:15];

    // Program Counter
    reg [3:0] PC;

    // Stage 1: Instruction Fetch
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            PC <= 0;
            IF_ID_instr <= 0;
        end else begin
            IF_ID_instr <= instr_mem[PC];
            PC <= PC + 1;
        end
    end

    // Stage 2: Instruction Decode
    wire [3:0] opcode = IF_ID_instr[15:12];
    wire [3:0] rd     = IF_ID_instr[11:8];
    wire [3:0] rs1    = IF_ID_instr[7:4];
    wire [3:0] rs2imm = IF_ID_instr[3:0];

    always @(posedge clk) begin
        ID_EX_instr <= IF_ID_instr;
        ID_EX_reg1  <= regfile[rs1];
        ID_EX_reg2  <= (opcode == OP_LOAD) ? rs2imm : regfile[rs2imm];
    end

    // Stage 3: Execute
    always @(posedge clk) begin
        EX_opcode <= ID_EX_instr[15:12];
        EX_WB_rd  <= ID_EX_instr[11:8];
        case (ID_EX_instr[15:12])
            OP_ADD:  EX_WB_result <= ID_EX_reg1 + ID_EX_reg2;
            OP_SUB:  EX_WB_result <= ID_EX_reg1 - ID_EX_reg2;
            OP_LOAD: EX_WB_result <= data_mem[ID_EX_reg2];
            default: EX_WB_result <= 8'b0;
        endcase
    end

    // Stage 4: Write Back
    always @(posedge clk) begin
        if (EX_opcode == OP_ADD || EX_opcode == OP_SUB || EX_opcode == OP_LOAD) begin
            regfile[EX_WB_rd] <= EX_WB_result;
        end
    end

endmodule
ðŸ§ª 4. Testbench (tb_pipelined_cpu.v)
verilog
Copy
Edit
`timescale 1ns/1ps

module tb_pipelined_cpu;

    reg clk;
    reg reset;

    // Instantiate CPU
    pipelined_cpu cpu (
        .clk(clk),
        .reset(reset)
    );

    // Clock generation
    initial clk = 0;
    always #5 clk = ~clk;

    initial begin
        // Initialize
        reset = 1;
        #10;
        reset = 0;

        // Simulate for some cycles
        #100;

        $finish;
    end
endmodule
ðŸ§  5. Sample Instruction Setup (Inside Processor)
To simulate meaningful operations, preload these instructions in instr_mem[] in the processor module:

verilog
Copy
Edit
initial begin
    // Load values into regfile for test
    regfile[1] = 8'd10;
    regfile[2] = 8'd20;
    data_mem[5] = 8'd99;

    // Program: ADD r3, r1, r2
    instr_mem[0] = {4'b0000, 4'd3, 4'd1, 4'd2}; // ADD r3 = r1 + r2 = 30

    // SUB r4, r2, r1
    instr_mem[1] = {4'b0001, 4'd4, 4'd2, 4'd1}; // SUB r4 = r2 - r1 = 10

    // LOAD r5, [5]
    instr_mem[2] = {4'b0010, 4'd5, 4'd0, 4'd5}; // LOAD r5 = MEM[5] = 99
end
ðŸ§ª 6. Simulation Behavior
Cycle	Stage	Operation
1	IF	Fetch ADD r3, r1, r2
2	ID	Decode ADD, read r1=10, r2=20
3	EX	Execute ADD â†’ r3 = 30
4	WB	Write 30 to r3
5	IF	Fetch SUB r4, r2, r1
6	ID	Decode SUB, read r2=20, r1=10
...	...	Continues pipelining

âœ… Summary
4-stage pipeline: IF â†’ ID â†’ EX â†’ WB

Basic ALU + memory-based instruction support

Register and memory preloaded for simulation

Easy to extend (e.g., add STORE, BEQ, etc.)

Would you like:

A waveform view (.vcd)?

Extensions like STORE, JUMP, NOP?

Performance analysis (e.g., CPI calculation)?